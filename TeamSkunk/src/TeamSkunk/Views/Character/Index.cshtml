@using Kendo.Mvc.UI;
@using TeamSkunk.ViewModels;

@model IEnumerable<CharacterVM>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.AntiForgeryToken()

<h2>Characters by Member</h2>

<li>
    <a href="@Url.Action("CharacterGrid", "Character")" class="elements">
        <span>Character Grid</span>
    </a>
</li>

<div class="demo-section k-content wide">
    @(Html.Kendo().Chart(Model)
        .Name("chart")
        .Title("Characters")
        .DataSource(dataSource => dataSource
            .Read(read => read.Action("ReadCharacters", "Character"))
            .Group(group => group.Add(model => model.Name))
            .Sort(sort => sort.Add(model => model.Name).Ascending())
        )
        .ChartArea(chartArea => chartArea
            .Background("transparent")
        )
        .Series(series =>
        {
            series.Column(model => model.Level).Name("Level");
            series.Column(model => model.Stars).Name("Stars");
            series.Column(model => model.Gear).Name("Gear");

        })
        .Legend(legend => legend
            .Position(ChartLegendPosition.Bottom)
        )
        
        .CategoryAxis(axis => axis
            .Name("label-axis")
            .Categories(category => category.MemberId)
        )
        .ValueAxis(axis => axis.Numeric()
            .Labels(labels => labels
                .Format("{0}")
            )
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("{0}")
            .Template("#= series.name #: #= value #")
        ).Deferred()

    )
</div>

@* All initialization scripts are rendered to the bottom of the page, see Layout.cshtml *@
@section scripts {
    @Html.Kendo().DeferredScripts()
}

<script type="text/javascript">
    function getData() {
        $.ajax({
            url: '@Url.Action("ReadCharacters", "Character")',
            type: 'GET',
            dataType: "json",
            success: function (data) {
                sync(data);
            }
        })
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function onRequestEnd(e) {
        if (e.type == null || e.type == "update" || e.type == "create" || e.type == "destroy") {
            e.sender.read();
        }
    }

    function serialize(data) {
        data.__RequestVerificationToken = $("input[name=__RequestVerificationToken]").val();
    }
</script>